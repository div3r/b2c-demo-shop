<?php

namespace Pyz\Zed\{{ module }}\Business\Model\Writer;

use Generated\Shared\Transfer\{{ module }}Transfer;
use Pyz\Zed\{{ module }}\Persistence\{{ module }}EntityManagerInterface;

class {{ module }}Writer
{
    /**
     * @var {{ module }}EntityManagerInterface
     */
    private ${{ module | lower }}EntityManager;


    /**
     * @param {{ module }}EntityManagerInterface ${{ module | lower }}EntityManager
     */
    public function __construct({{ module }}EntityManagerInterface ${{ module | lower }}EntityManager)
    {
        $this->{{ module | lower }}EntityManager = ${{ module | lower }}EntityManager;
    }


    /**
    * @param {{ module }}Transfer ${{ module | lower }}Transfer
    *
    * @return {{ module }}Transfer
    */
    public function create{{ module }}({{ module }}Transfer ${{ module | lower }}Transfer): {{ module }}Transfer
    {
        return $this->{{ module | lower }}EntityManager->create{{ module }}(${{ module | lower }}Transfer);
    }


    /**
    * @param {{ module }}Transfer ${{ module | lower }}Transfer
    *
    * @return {{ module }}Transfer
    */
    public function update{{ module }}({{ module }}Transfer ${{ module | lower }}Transfer): {{ module }}Transfer
    {
        ${{ module | lower }}Transfer->requireId{{ module }}();

        return $this->{{ module | lower }}EntityManager->update{{ module }}(${{ module | lower }}Transfer);
    }

    /**
    * @param {{ module }}Transfer ${{ module | lower }}Transfer
    *
    * @return void
    */
    public function delete{{ module }}({{ module }}Transfer ${{ module | lower }}Transfer): void
    {
        ${{ module | lower }}Transfer->requireId{{ module }}();

        $this->{{ module | lower }}EntityManager->delete{{ module }}(${{ module | lower }}Transfer);
    }
}
